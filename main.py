from fastapi import FastAPI, HTTPException, Request
import openai
import os
from dotenv import load_dotenv
from supabase import create_client

load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
openai.api_key = os.getenv("OPENAI_API_KEY")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

app = FastAPI()

@app.post("/embed-hook")
async def embed_hook(request: Request):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Supabase Webhook
        input_data = await request.json()
        print("üî• Supabase payload:", input_data)

        record = input_data.get('record', {})
        old_record = input_data.get('old_record', {})

        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è
        profile_id = record.get('_id')
        if not profile_id:
            raise ValueError("Missing '_id' in payload")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        fields_to_watch = [
            "about_me_text",
            "keyachievementssuccesses_text",
            "current_role_text",
            "searchfield",
            "suppliers_choise",
            "spec_areas_choise"
        ]

        def fields_updated(new, old, keys):
            return any(new.get(k) != old.get(k) for k in keys)

        if not fields_updated(record, old_record, fields_to_watch):
            return {"message": "No relevant fields changed. Skipping embedding update."}

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è embedding
        combined_text = " ".join([
            record.get("about_me_text", ""),
            record.get("keyachievementssuccesses_text", ""),
            record.get("current_role_text", ""),
            record.get("searchfield", ""),
            record.get("suppliers_choise", ""),
            record.get("spec_areas_choise", "")
        ])

        # –ü–æ–ª—É—á–∞–µ–º embedding —á–µ—Ä–µ–∑ OpenAI
        response = openai.Embedding.create(
            model="text-embedding-3-small",  # –ú–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å
            input=combined_text
        )
        embedding = response['data'][0]['embedding']
        print("‚úÖ Embedding generated successfully")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º embedding –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        supabase.table("expert_embedding").upsert({
            "_id": profile_id,
            "embedding": embedding
        }).execute()

        return {"status": "success", "_id": profile_id}

    except Exception as e:
        print("‚ùå Exception:", str(e))
        raise HTTPException(status_code=500, detail=str(e))

