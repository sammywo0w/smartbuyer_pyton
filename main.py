from fastapi import FastAPI, HTTPException, Request
import openai
import os
from dotenv import load_dotenv
from supabase import create_client

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

app = FastAPI()

# –£—Ç–∏–ª–∏—Ç–∞: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
def safe_str(val):
    if isinstance(val, list):
        return " ".join(str(x) for x in val if x is not None)
    return str(val) if val is not None else ""

# –£—Ç–∏–ª–∏—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
def fields_updated(new, old, keys):
    return any(new.get(k) != old.get(k) for k in keys)

@app.post("/embed-hook")
async def embed_hook(request: Request):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ webhook-–∑–∞–ø—Ä–æ—Å–∞
        input_data = await request.json()
        print("üî• Supabase payload:", input_data)

        record = input_data.get('record', {})
        old_record = input_data.get('old_record', {})
        profile_id = record.get('_id')

        if not profile_id:
            raise ValueError("Missing '_id' in record")

        # –ü–æ–ª—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        fields_to_watch = [
            "about_me_text",
            "keyachievementssuccesses_text",
            "current_role_text",
            "searchfield",
            "suppliers_choise",
            "spec_areas_choise"
        ]

        if not fields_updated(record, old_record, fields_to_watch):
            print("‚ÑπÔ∏è No relevant fields changed. Skipping update.")
            return {"message": "No relevant fields changed."}

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è embedding
        combined_text = " ".join([
            safe_str(record.get("about_me_text")),
            safe_str(record.get("keyachievementssuccesses_text")),
            safe_str(record.get("current_role_text")),
            safe_str(record.get("searchfield")),
            safe_str(record.get("suppliers_choise")),
            safe_str(record.get("spec_areas_choise")),
        ])

        # –ü–æ–ª—É—á–µ–Ω–∏–µ embedding –æ—Ç OpenAI
        response = openai.Embedding.create(
            model="text-embedding-3-small",
            input=combined_text
        )
        embedding = response["data"][0]["embedding"]
        print("‚úÖ Embedding generated")

        # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É expert_embedding
        supabase.table("expert_embedding").upsert({
            "_id": profile_id,
            "embedding": embedding
        }).execute()
        print("‚úÖ Embedding saved to expert_embedding")

        return {"status": "success", "_id": profile_id}

    except Exception as e:
        print("‚ùå Exception:", str(e))
        raise HTTPException(status_code=500, detail=str(e))

from fastapi import Query
from typing import List

@app.post("/search")
async def search_similar_profiles(request: Request, top_k: int = Query(default=5)):
    try:
        data = await request.json()
        query_text = data.get("query", "")

        if not query_text:
            raise ValueError("Query is empty")

        # –ü–æ–ª—É—á–∞–µ–º embedding –æ—Ç OpenAI
        response = openai.Embedding.create(
            model="text-embedding-3-small",
            input=query_text
        )
        query_embedding = response['data'][0]['embedding']

        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –∫ Supabase (pgvector –æ–ø–µ—Ä–∞—Ç–æ—Ä cosine distance <#>)
        sql = """
            SELECT _id, 1 - (embedding <#> %s) AS similarity
            FROM expert_embedding
            ORDER BY embedding <#> %s
            LIMIT %s;
        """

        # –í—ã–∑–æ–≤ raw SQL —á–µ—Ä–µ–∑ postgrest –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—É–¥–æ–±–µ–Ω,
        # –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —á–µ—Ä–µ–∑ Supabase RPC (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
        # –∏–ª–∏ psycopg2 / asyncpg ‚Äî –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Supabase REST

        # –ü—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ RPC —Å raw SQL —á–µ—Ä–µ–∑ supabase-py –Ω–µ—Ç,
        # –ø–æ—ç—Ç–æ–º—É –ü–û–î–°–ö–ê–ñ–ò, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî —è –ø–æ–º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å SQL-—Ñ—É–Ω–∫—Ü–∏—é –≤ Supabase,
        # —Ç–æ–≥–¥–∞ —Ç—É—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞—Ç—å `.rpc("search_embeddings", { ... })`

        return {
            "message": "‚ùó –î–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Supabase RPC –∏–ª–∏ direct DB access"
        }

    except Exception as e:
        print("‚ùå Search exception:", str(e))
        raise HTTPException(status_code=500, detail=str(e))

