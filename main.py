from fastapi import FastAPI, HTTPException, Request
import openai
import os
import json
from dotenv import load_dotenv
from supabase import create_client

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
load_dotenv()

# –ö–ª—é—á–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
openai.api_key = os.getenv("OPENAI_API_KEY")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY")

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
app = FastAPI()


@app.post("/embed-hook")
async def embed_hook(request: Request):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ–ª–æ –ø—Ä–∏—à–ª–æ —Å—Ç—Ä–æ–∫–æ–π)
        body_bytes = await request.body()
        body_str = body_bytes.decode("utf-8")
        print("üì¶ Raw body:", body_str)

        # –ü–∞—Ä—Å–∏–Ω–≥ JSON
        input_data = json.loads(body_str)
        print("üî• Supabase payload (parsed):", input_data)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        text = input_data.get("text", "")
        profile_id = input_data.get("id")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not profile_id or not text:
            raise ValueError(f"Missing 'id' or 'text'. Got id: {profile_id}, text: {text}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –æ—Ç OpenAI
        response = openai.embeddings.create(
            input=text,
            model="text-embedding-3-small"
        )
        embedding = response.data[0].embedding
        print("‚úÖ Embedding generated successfully")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Supabase
        supabase.table("expert_profile").update({"embedding": embedding}).eq("_id", profile_id).execute()

        return {"status": "success", "_id": profile_id}

    except Exception as e:
        print("‚ùå EXCEPTION:", str(e))
        raise HTTPException(status_code=500, detail=str(e))
